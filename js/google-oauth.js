// Generated by CoffeeScript 1.5.0
var CLIENTID, LOGOUT, OAUTHURL, REDIRECT, SCOPE, TYPE, VALIDURL, acToken, bp, callback, debug_var, expiresIn, getSubscription, getUserInfo, gup, importFromGoogleReader, loggedIn, login, login2, onAuthorized, startLogoutPolling, tokenType, user, validateToken, _url;

bp = chrome.extension.getBackgroundPage();

debug_var = "";

OAUTHURL = 'https://accounts.google.com/o/oauth2/auth?';

VALIDURL = 'https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=';

SCOPE = 'https://www.googleapis.com/auth/userinfo.profile https://www.google.com/reader/api';

CLIENTID = '640115812452-mk9muia2ldjp601bumj3mtiaemoce0qc.apps.googleusercontent.com';

REDIRECT = 'http://reader.marboo.biz';

LOGOUT = 'http://accounts.google.com/Logout';

TYPE = 'token';

_url = OAUTHURL + 'scope=' + SCOPE + '&client_id=' + CLIENTID + '&redirect_uri=' + REDIRECT + '&response_type=' + TYPE;

acToken = "";

tokenType = "";

expiresIn = "";

user = "";

loggedIn = false;

login = function() {
  var pollTimer, win;
  win = window.open(_url, "windowname1", 'width=800, height=600');
  return pollTimer = window.setInterval(function() {
    var url;
    try {
      console.log(win.document.URL);
      if (win.document.URL.indexOf(REDIRECT) !== -1) {
        window.clearInterval(pollTimer);
        url = win.document.URL;
        acToken = gup(url, 'access_token');
        tokenType = gup(url, 'token_type');
        expiresIn = gup(url, 'expires_in');
        win.close();
        return validateToken(acToken);
      }
    } catch (e) {
      return console.log(e);
    }
  }, 500);
};

validateToken = function(token) {
  return $.ajax({
    url: VALIDURL + token,
    data: null,
    success: function(responseText) {
      getUserInfo();
      loggedIn = true;
      $('#loginText').hide();
      $('#logoutText').show();
      return getSubscription();
    },
    dataType: "jsonp"
  });
};

getSubscription = function() {
  return $.getJSON({
    url: 'https://www.google.com/reader/api/0/subscription/list?output=json',
    dataType: "jsonp"
  }).done(function(data) {
    return console.log(data);
  });
};

getUserInfo = function() {
  return $.ajax({
    url: 'https://www.googleapis.com/oauth2/v1/userinfo?access_token=' + acToken,
    data: null,
    success: function(resp) {
      user = resp;
      console.log(user);
      $('#uName').text('Welcome ' + user.name);
      return $('#imgHolder').attr('src', user.picture);
    },
    dataType: "jsonp"
  });
};

gup = function(url, name) {
  var regex, regexS, results;
  name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
  regexS = "[\\#&]" + name + "=([^&#]*)";
  regex = new RegExp(regexS);
  results = regex.exec(url);
  if (results === null) {
    return "";
  } else {
    return results[1];
  }
};

startLogoutPolling = function() {
  $('#loginText').show();
  $('#logoutText').hide();
  loggedIn = false;
  $('#uName').text('Welcome ');
  return $('#imgHolder').attr('src', 'none.jpg');
};

importFromGoogleReader = function(subs) {
  var cate, feed_ul, folder, folder_li, folders, item, tmp_dict, wrap_fun, _i, _j, _len, _len1, _ref, _results;
  debug_var = subs;
  feed_ul = $("#sub-tree-item-0-main ul:first");
  tmp_dict = {};
  _results = [];
  for (_i = 0, _len = subs.length; _i < _len; _i++) {
    item = subs[_i];
    folders = [];
    item.type = "rss";
    item.feedUrl = item.id.substring(5);
    wrap_fun = function(item, folders) {
      var domainName, url;
      if (item.htmlUrl !== void 0) {
        domainName = item.htmlUrl.split("/")[2];
      } else {
        domainName = item.feedUrl.split("/")[3];
      }
      url = "http://" + domainName + "/favicon.ico";
      return saveFavicon(url, domainName, function(faviconUrl) {
        var folder, _j, _len1;
        item.favicon = faviconUrl;
        getJsonFeed(url, function(feed) {
          return localStorage.setItem(url, JSON.stringify(feed));
        });
        for (_j = 0, _len1 = folders.length; _j < _len1; _j++) {
          folder = folders[_j];
          folder.append(generateFeed(item));
        }
        subscriptions.push(item);
        return localStorage.setItem("subscriptions", JSON.stringify(subscriptions));
      });
    };
    if (item.categories.length === 0) {
      folders.push(feed_ul);
    } else {
      _ref = item.categories;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        cate = _ref[_j];
        folder = "";
        if (tmp_dict[cate.label] === void 0) {
          folder = {
            type: "folder",
            title: cate.label,
            item: []
          };
          subscriptions.push(folder);
          localStorage.setItem("subscriptions", JSON.stringify(subscriptions));
          tmp_dict[folder.title] = folder;
        } else {
          folder = tmp_dict[cate.label];
        }
        folder.item.push(item);
        folder_li = generateFolder(folder);
        feed_ul.append(folder_li);
        folders.push(folder_li.find("ul:first"));
      }
    }
    _results.push(wrap_fun(item, folders));
  }
  return _results;
};

callback = function(resp, xhr) {
  return importFromGoogleReader(JSON.parse(xhr.response).subscriptions);
};

onAuthorized = function() {
  var request, url;
  url = 'https://www.google.com/reader/api/0/subscription/list';
  request = {
    method: 'GET',
    parameters: {
      'output': 'json'
    }
  };
  return bp.oauth.sendSignedRequest(url, callback, request);
};

login2 = function() {
  return bp.oauth.authorize(onAuthorized);
};
